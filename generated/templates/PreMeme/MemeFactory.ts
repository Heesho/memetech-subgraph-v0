// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class MemeFactory__MemeCreated extends ethereum.Event {
  get params(): MemeFactory__MemeCreated__Params {
    return new MemeFactory__MemeCreated__Params(this);
  }
}

export class MemeFactory__MemeCreated__Params {
  _event: MemeFactory__MemeCreated;

  constructor(event: MemeFactory__MemeCreated) {
    this._event = event;
  }

  get index(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get meme(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MemeFactory__MinAmountInUpdated extends ethereum.Event {
  get params(): MemeFactory__MinAmountInUpdated__Params {
    return new MemeFactory__MinAmountInUpdated__Params(this);
  }
}

export class MemeFactory__MinAmountInUpdated__Params {
  _event: MemeFactory__MinAmountInUpdated;

  constructor(event: MemeFactory__MinAmountInUpdated) {
    this._event = event;
  }

  get minAmountIn(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MemeFactory__TreasuryUpdated extends ethereum.Event {
  get params(): MemeFactory__TreasuryUpdated__Params {
    return new MemeFactory__TreasuryUpdated__Params(this);
  }
}

export class MemeFactory__TreasuryUpdated__Params {
  _event: MemeFactory__TreasuryUpdated;

  constructor(event: MemeFactory__TreasuryUpdated) {
    this._event = event;
  }

  get treasury(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MemeFactory extends ethereum.SmartContract {
  static bind(address: Address): MemeFactory {
    return new MemeFactory("MemeFactory", address);
  }

  NAME_MAX_LENGTH(): BigInt {
    let result = super.call(
      "NAME_MAX_LENGTH",
      "NAME_MAX_LENGTH():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_NAME_MAX_LENGTH(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "NAME_MAX_LENGTH",
      "NAME_MAX_LENGTH():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SYMBOL_MAX_LENGTH(): BigInt {
    let result = super.call(
      "SYMBOL_MAX_LENGTH",
      "SYMBOL_MAX_LENGTH():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_SYMBOL_MAX_LENGTH(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SYMBOL_MAX_LENGTH",
      "SYMBOL_MAX_LENGTH():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  base(): Address {
    let result = super.call("base", "base():(address)", []);

    return result[0].toAddress();
  }

  try_base(): ethereum.CallResult<Address> {
    let result = super.tryCall("base", "base():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createMeme(
    name: string,
    symbol: string,
    uri: string,
    account: Address,
    amountIn: BigInt,
  ): Address {
    let result = super.call(
      "createMeme",
      "createMeme(string,string,string,address,uint256):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromString(uri),
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(amountIn),
      ],
    );

    return result[0].toAddress();
  }

  try_createMeme(
    name: string,
    symbol: string,
    uri: string,
    account: Address,
    amountIn: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createMeme",
      "createMeme(string,string,string,address,uint256):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromString(uri),
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(amountIn),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getIndexByMeme(meme: Address): BigInt {
    let result = super.call(
      "getIndexByMeme",
      "getIndexByMeme(address):(uint256)",
      [ethereum.Value.fromAddress(meme)],
    );

    return result[0].toBigInt();
  }

  try_getIndexByMeme(meme: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getIndexByMeme",
      "getIndexByMeme(address):(uint256)",
      [ethereum.Value.fromAddress(meme)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getIndexBySymbol(symbol: string): BigInt {
    let result = super.call(
      "getIndexBySymbol",
      "getIndexBySymbol(string):(uint256)",
      [ethereum.Value.fromString(symbol)],
    );

    return result[0].toBigInt();
  }

  try_getIndexBySymbol(symbol: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getIndexBySymbol",
      "getIndexBySymbol(string):(uint256)",
      [ethereum.Value.fromString(symbol)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMemeByIndex(index: BigInt): Address {
    let result = super.call(
      "getMemeByIndex",
      "getMemeByIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)],
    );

    return result[0].toAddress();
  }

  try_getMemeByIndex(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getMemeByIndex",
      "getMemeByIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMemeCount(): BigInt {
    let result = super.call("getMemeCount", "getMemeCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getMemeCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getMemeCount", "getMemeCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  index_Meme(param0: BigInt): Address {
    let result = super.call("index_Meme", "index_Meme(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_index_Meme(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("index_Meme", "index_Meme(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  meme_Index(param0: Address): BigInt {
    let result = super.call("meme_Index", "meme_Index(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_meme_Index(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("meme_Index", "meme_Index(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minAmountIn(): BigInt {
    let result = super.call("minAmountIn", "minAmountIn():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minAmountIn(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minAmountIn", "minAmountIn():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol_Index(param0: string): BigInt {
    let result = super.call("symbol_Index", "symbol_Index(string):(uint256)", [
      ethereum.Value.fromString(param0),
    ]);

    return result[0].toBigInt();
  }

  try_symbol_Index(param0: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "symbol_Index",
      "symbol_Index(string):(uint256)",
      [ethereum.Value.fromString(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasury(): Address {
    let result = super.call("treasury", "treasury():(address)", []);

    return result[0].toAddress();
  }

  try_treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasury", "treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _base(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _treasury(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateMemeCall extends ethereum.Call {
  get inputs(): CreateMemeCall__Inputs {
    return new CreateMemeCall__Inputs(this);
  }

  get outputs(): CreateMemeCall__Outputs {
    return new CreateMemeCall__Outputs(this);
  }
}

export class CreateMemeCall__Inputs {
  _call: CreateMemeCall;

  constructor(call: CreateMemeCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get uri(): string {
    return this._call.inputValues[2].value.toString();
  }

  get account(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CreateMemeCall__Outputs {
  _call: CreateMemeCall;

  constructor(call: CreateMemeCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetMinAmountInCall extends ethereum.Call {
  get inputs(): SetMinAmountInCall__Inputs {
    return new SetMinAmountInCall__Inputs(this);
  }

  get outputs(): SetMinAmountInCall__Outputs {
    return new SetMinAmountInCall__Outputs(this);
  }
}

export class SetMinAmountInCall__Inputs {
  _call: SetMinAmountInCall;

  constructor(call: SetMinAmountInCall) {
    this._call = call;
  }

  get _minAmountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinAmountInCall__Outputs {
  _call: SetMinAmountInCall;

  constructor(call: SetMinAmountInCall) {
    this._call = call;
  }
}

export class SetTreasuryCall extends ethereum.Call {
  get inputs(): SetTreasuryCall__Inputs {
    return new SetTreasuryCall__Inputs(this);
  }

  get outputs(): SetTreasuryCall__Outputs {
    return new SetTreasuryCall__Outputs(this);
  }
}

export class SetTreasuryCall__Inputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }

  get _treasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTreasuryCall__Outputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
